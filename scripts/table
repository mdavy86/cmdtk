#!/usr/bin/env perl
# -*- mode: perl; -*-
use Applify;
use Mojo::Base -base;
use Text::Table::Tiny qw{generate_table};
use IO::Interactive qw{is_interactive};

documentation __FILE__;

extends 'Mojo::Base';

option flag => cumulative => "report cumulative", default => 0;
option str  => delimiter  => "delimiter to use",  default => "\t";
option flag => descending => "sort descending",   default => 1;
option str  => id_column  => "column for id",     default => 0;
option flag => read_head  => "input has header",  default => 1;
option str  => columns    => "column names when using --noread-head";

has header  => sub { [] };

sub read_header {
  my ($self, $fh, $regex, $idcol) = @_;
  my $line = <$fh>;
  chomp $line;
  push @{$self->header}, (split $regex, $line, 0)[@$idcol];
  return $self;
}

sub read {
  my $self = shift;
  return $self unless $self->result == 0;
  my $idcol = $self->slice;
  (my $delim = $self->delimiter) =~ s/[+*]//;
  my $regex = $self->regex;
  my %data;
  $self->_columns_to_header();
  $self->read_header(\*STDIN, $regex, $idcol) if $self->read_head;
  while (<STDIN>) {
    chomp;
    next unless /^\w/;
    my (@F) = split $regex, $_, 0;
    $data{join $delim, @F[@$idcol]}++;
  }
  $self->{data} = \%data;
  return $self;
}

has regex => sub {
  my $self  = shift;
  my $delim = $self->delimiter;
  return qr/$delim/;
};

has result  => 0;

has slice => sub { return [ split /,/, $_[0]->id_column ]};

sub table {
  my $self  = shift;
  my $regex = $self->regex;
  my $data  = $self->{data};
  my $desc  = sub { $b->[-1] <=> $a->[-1] || $a->[0] cmp $b->[0] };
  my $asc   = sub { $a->[-1] <=> $b->[-1] || $b->[0] cmp $a->[0] };
  my $sort_func = $self->descending ? $desc : $asc;
  my $i = 0;
  my $c = $self->cumulative;
  my $header = $self->header;
  $self->read_head(1) if @$header;
  push @$header, 'frequency'  if $self->read_head;
  push @$header, 'cumulative' if $self->read_head && $c;
  return [
    ($self->read_head ? $header : ()),
    map  { [ @$_, ($c ? $i+=$_->[-1] : ()) ]  }
    sort { $sort_func->() }
    map  { [ split($regex, $_), $data->{$_} ] } keys %$data
  ];
}

sub write {
  my $self = shift;
  my $data = $self->table();
  say generate_table( rows => $data, header_row => $self->read_head );
  return $self;
}

sub _columns_to_header {
    my $self = shift;
    return $self unless $self->columns;
    $self->read_head(0);
    my $idcol = $self->slice;
    push @{$self->header}, (split /,/, $self->columns)[0 .. $#$idcol];
    return $self;
}

app {
    shift->_script->print_help if is_interactive;
    return shift->read->write->result;
};

=pod

=head1 NAME

table - command line table() from R

=head1 DESCRIPTION

Often there is a need to translate data such as found below into a frequency
table. This script is setup to do that.

  id	data	NAME
  1	first	John
  2	second	Jane
  3	third	Jane
  4	fourth	Jane
  5	fifth	Sam
  6	sixth	Sam

=head1 SYNOPSIS

  table [options]

Example:

  cmd_creating_output | table -delimiter ' +' -id-column 1,2

=cut
